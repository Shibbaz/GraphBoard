continue
        Video.find_by(author: object[:id])
continue
        Video.find_by(author: object[:id])
Video.all
Video.create(author: object[:id], id: SecureRandom.uuid, description: "XDDDDDDDDDDDDDDDDDD", name: "XDDDDDDDDDDDD", rules: [{}], video_type: "XDDDD").save!
Video.create(author: object[:id], id: SecureRandom.uuid, description: "XDDDDDDDDDDDDDDDDDD", name: "XDDDDDDDDDDDD", rules: {}, video_type: "XDDDD").save!
Video.create(author: object[:id], id: SecureRandom.uuid, description: "XDDDDDDDDDDDDDDDDDD", name: "XDDDDDDDDDDDD", rules: {}).save!
Video.create(author: object[:id], id: SecureRandom.uuid, description: "XDDDDDDDDDDDDDDDDDD", name: "XDDDDDDDDDDDD").save!
Video.create(author: object[:id], id: SecureRandom.uuid).save!
Video.create(author: object[:id], id: SecureRandom.uuid).save
Video.all
Video.create(author: object[:id], id: SecureRandom.uuid)
Video.create(author: object[:id])
Video.all
Video.create(author: object[:id])
Video.all
Video
        Video.find_by(author: object[:id])
continue
exit
object[:id]
object
continue
    result = StoragesSchema.execute(query, variables: variables, context: context, operation_name: operation_name)
continue
    result = StoragesSchema.execute(query, variables: variables, context: context, operation_name: operation_name)
continue
    result = StoragesSchema.execute(query, variables: variables, context: context, operation_name: operation_name)
variables
params
query
ApolloFederation::Tracing.should_add_traces(request.headers)
session
current_user_id
continue
params[:query]
params
continue
params
current_user_id
session
ApolloFederation::Tracing.should_add_traces(request.headers)
continue
exit
xit
credentials
