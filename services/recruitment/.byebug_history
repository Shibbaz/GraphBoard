continue
            expect(requirements[0]["details"]["technology"]).to eq(technology)
            expect(requirements[0]["details"]["experience"]).to eq(10)
            expect(requirements[0]["details"]["seniority"]).to eq("MID")
requirements[0]["details"]["technology"]
continue
TechnologyTag.all
TechnologyTag
Tag
continue
            expect(offer.name).to eq("Typescript developer")
offer
continue
offer.update(        {
            name: "Typescript developer",
            description: nil,
            requirements: nil,
            tags: nil,
            contact_details: nil
        })
offer.update_attribute(        {
            name: "Typescript developer",
            description: nil,
            requirements: nil,
            tags: nil,
            contact_details: nil
        })
offer.update(        {
            name: "Typescript developer",
            description: nil,
            requirements: nil,
            tags: nil,
            contact_details: nil
        })
            offer.reload
            mutation = Mutations::UpdateOffer.new(object: nil, field: nil, context: {
                current_user_id: user_id
            }).resolve(offer_id: offer.id, informations: informations)
            expect(mutation[:status]).to eq(200)
offer.reload
offer
continue
mutation[:status]
continue
mutation[:status]
mutation
continue
            expect(
                    Mutations::DeleteOffer.new(object: nil, field: nil, context: {
                    current_user_id: nil
                }).resolve(offer_id: offer.id)
            ).to eq(GraphQL::ExecutionError.new('Authentication Error'))
                    Mutations::DeleteOffer.new(object: nil, field: nil, context: {
                    current_user_id: nil
                }).resolve(offer_id: offer.id)
continue
offer.id
offer
mutation
continue
mutation
exit
mutation
exit
mutation
continue
            expect{ 
                repository.create(
                    informations: nil,
                    current_user_id: SecureRandom.uuid
                ) }.to raise_error(ArgumentError)
            expect{ 
                repository.create(
                    informations: nil,
                    current_user_id: SecureRandom.uuid
                ) }.to raise_error
repository.create(
                    informations: nil,
                    current_user_id: SecureRandom.uuid
                ).methods
repository.create(
                    informations: nil,
                    current_user_id: SecureRandom.uuid
                ).errors
repository.create(
                    informations: nil,
                    current_user_id: SecureRandom.uuid
                ).error
repository.create(
                    informations: nil,
                    current_user_id: SecureRandom.uuid
                )
continue
repository.create(
                    informations: nil,
                    current_user_id: SecureRandom.uuid
                )
continue
          expect{ 
                repository.create(
                    informations: nil,
                    current_user_id: SecureRandom.uuid
                ) }.to raise_error(
                    ArgumentError.new "ArgumentError"
                )
repository.create(
                    informations: nil,
                    current_user_id: SecureRandom.uuid
                )
continue
                repository.create(
                    informations: nil,
                    current_user_id: SecureRandom.uuid
                )
continue
                repository.create(
                    informations: nil,
                    current_user_id: SecureRandom.uuid
                )
continue
                  OfferWasCreated.new(
                    data: {
                      current_user_id: current_user_id,
                      offer_id: SecureRandom.uuid,
                      adapter: @adapter,
                      informations: informations.to_h
                    }
                  )
              ActiveRecord::Base.transaction do
                Rails.configuration.event_store.publish(
                  OfferWasCreated.new(
                    data: {
                      current_user_id: current_user_id,
                      offer_id: SecureRandom.uuid,
                      adapter: @adapter,
                      informations: informations.to_h
                    }
                  ),
                  stream_name: "Offer-#{SecureRandom.uuid}"
                )
              end
exit
                Rails.configuration.event_store.publish(
                  OfferWasCreated.new(
                    data: {
                      id: SecureRandom.uuid,
                      current_user_id: current_user_id,
                      offer_id: SecureRandom.uuid,
                      adapter: @adapter,
                      informations: informations.to_h
                    }
                  ),
                  stream_name: "Offer-#{SecureRandom.uuid}"
                )
                Rails.configuration.event_store.publish(event, stream_name: "Offer-#{SecureRandom.uuid}")
                Rails.configuration.event_store.publish(event, stream_name: "Offer")
event =                  OfferWasCreated.new(
                    data: {
                      current_user_id: current_user_id,
                      offer_id: SecureRandom.uuid,
                      adapter: @adapter,
                      informations: informations.to_h
                    }
                  )
                  OfferWasCreated.new(
                    data: {
                      current_user_id: current_user_id,
                      offer_id: SecureRandom.uuid,
                      adapter: @adapter,
                      informations: informations.to_h
                    }
                  )
Offer.create
Offer.new
Offer
              ActiveRecord::Base.transaction do
                Rails.configuration.event_store.publish(
                  OfferWasCreated.new(
                    data: {
                      current_user_id: current_user_id,
                      offer_id: SecureRandom.uuid,
                      adapter: @adapter,
                      informations: informations.to_h
                    }
                  ),
                  stream_name: "Offer-"
                )
              end
                Rails.configuration.event_store.publish(
                  OfferWasCreated.new(
                    data: {
                      current_user_id: current_user_id,
                      offer_id: SecureRandom.uuid,
                      adapter: @adapter,
                      informations: informations.to_h
                    }
                  ),
                  stream_name: "Offer-#{SecureRandom.uuid}"
                )
              ActiveRecord::Base.transaction do
                Rails.configuration.event_store.publish(
                  OfferWasCreated.new(
                    data: {
                      current_user_id: current_user_id,
                      offer_id: SecureRandom.uuid,
                      adapter: @adapter,
                      informations: informations.to_h
                    }
                  ),
                  stream_name: "Offer-#{SecureRandom.uuid}"
                )
              end
                  OfferWasCreated.new(
                    data: {
                      current_user_id: current_user_id,
                      offer_id: SecureRandom.uuid,
                      adapter: @adapter,
                      informations: informations.to_h
                    }
                  )
                Rails.configuration.event_store.publish(
                  OfferWasCreated.new(
                    data: {
                      current_user_id: current_user_id,
                      offer_id: SecureRandom.uuid,
                      adapter: @adapter,
                      informations: informations.to_h,
                    }
                  ),
                  stream_name: "Offer-#{SecureRandom.uuid}"
                )
              ActiveRecord::Base.transaction do
                Rails.configuration.event_store.publish(
                  OfferWasCreated.new(
                    data: {
                      current_user_id: current_user_id,
                      offer_id: SecureRandom.uuid,
                      adapter: @adapter,
                      informations: informations.to_h,
                    }
                  ),
                  stream_name: "Offer-#{SecureRandom.uuid}"
                )
              end
ActiveRecord::Base.transaction do
                Rails.configuration.event_store.publish(
                  OfferWasCreated.new(
                    data: {
                      current_user_id: current_user_id,
                      offer_id: SecureRandom.uuid,
                      adapter: @adapter,
                      informations: informations.to_h,
                    }
                  ),
                  stream_name: "Offer-#{SecureRandom.uuid}"
                )
