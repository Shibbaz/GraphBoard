continue
    result = UsersSchema.execute(query, variables: variables, context: context, operation_name: operation_name)
variables
query
operation_name
continue
scope.select{|user| user.technologies.any? {|h| value.include? h["name"]}}
scope.select{|user| user.technologies.any? {|h| "X".include? h["name"]}}
scope.select{|user| user.technologies.any? {|h| value.include? h["name"]}}
scope.select{|user| user.technologies.any? {|h| h["name"].include? value}}
scope.select{|user| user.technologies.any? {|h| h["name"].include? value}
scope.select{|user| user.technologies.any? {|h| value.include h["name"]}}
scope.select{|user| user.technologies.any? {|h| h["name"] == value}}
scope.map{|user| user.technologies.any? {|h| h["name"] == value}}
scope.each{|user| user.technologies.any? {|h| h["name"] != value}}
scope.each{|user| user.technologies.any? {|h| h["name"] == value}}
scope.each{|user| user.technologies.p}
scope.each{|user| user.technologies.pluck(:names).exclude "X"}
scope.each{|user| user.technologies.pluck(:names).include? "X"}
scope.each{|user| user.technologies.pluck(:names).include? value}
scope.each{|user| user.technologies.pluck(:names).include? value}}
value
scope.each{|user| user.technologies.any? {|h| h["name"] == value}}
scope.map{|user| user.technologies.any? {|h| h["name"] == value}}
scope.select{|user| user.technologies.any? {|h| h["name"] == value}}
scope.select{|user| user.technologies.any {|h| h["name"] == value}}
scope.select{|user| user.technologies.detect {|h| h["name"] == value}}
scope.map{|user| user.technologies.detect {|h| h["name"] == value}}
scope.map{|user| user.technologies.detect {|h| h[:name] != value}}
scope.map{|user| user.technologies.detect {|h| h[:name] == value}}
scope.each{|user| user.technologies.detect {|h| h[:name] == value}}
scope.each{|user| user.technologies.detect {|h| h[:name] != value}}
scope.each{|user| user.technologies.detect {|h| h[:name] == value}}
scope.select{|user| user.technologies.detect {|h| h[:name] == value}}
scope.select{|user| user.technologies.detect {|h| h[:name] != value}}
scope.select{|user| user.technologies.any? {|h| h[:name] != value}}
scope.select{|user| user.technologies.any? {|h| h[:name] == value}}
scope.select{|user| user.technologies.each{|technology| technology["name"] != value}}
scope.select{|user| user.technologies.each{|technology| technology["name"] == value}}
scope.select{|user| user.technologies.select{|technology| technology["name"] == value}}
{|user| user.technologies.select{|technology| technology["name"] == value}}
scope.reject{|user| user.technologies.select{|technology| technology["name"] == value}}
scope.reject{|user| user.technologies.select{|technology| technology["name"] != value}}
scope.each{|user| user.technologies.reject{|technology| technology["name"] != value}}
scope.each{|user| user.technologies.reject{|technology| technology["name"] == value}}
scope.map{|user| user.technologies.reject{|technology| technology["name"] == value}}
scope.map{|user| user.technologies.reject{|technology| technology["name"] != value}}
scope.select{|user| user.technologies.reject{|technology| technology["name"] != value}}
scope.select{|user| user.technologies.select{|technology| technology["name"] != value}}
scope.select{|user| user.technologies.select{|technology| technology["name"] == value}}
scope.select{|user| user.technologies}
scope.select{|user| user}
scope.select{|user| user.technologies["name"] == value}
scope.select{|user| user.technologies[:name] == value}
scope
      scope.select { |technology| scope.technologies[:name] == value 
      scope.select { |technology| user.technologies[:name] == value 
scope
technology
self
user
      scope.select { |technology| user.technologies[:name] == value 
continue
    user_id = token.gsub('user-id:', '')
    user_id = token.gsub('user-id:', '').to_i
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
continue
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
continue
User.all
User
    User.find user_id
    user_id = token.gsub('user-id:', '').to_i
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
continue
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
request.env["HTTP_AUTHORIZATION"]
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
continue
exit
    User.find user_id
    user_id = token.gsub('user-id:', '').to_i
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
request.env["HTTP_AUTHORIZATION"]
continue
request.env["HTTP_AUTHORIZATION"]
crypt.decrypt_and_verify "onA70zPfqj1BtVgIpvFa19JaSb49swOaMJ3FS2JsZictTnND0HH51xsONnu1GFEpRPhFyfh--X7FCrplzLXIEUCi9--FRquuo6oP4lU88VustDs2Q=="
crypt
request.env["HTTP_AUTHORIZATION"]
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
token.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
token.decrypt request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
token.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
token.decrypt request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
continue
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
continue
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    user_id = token.gsub('user-id:', '').to_i
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
 request.env["HTTP_AUTHORIZATION"] =  request.env["HTTP_AUTHORIZATION"].to_s
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
 request.env["HTTP_AUTHORIZATION"] =  request.env["HTTP_AUTHORIZATION"].to_s
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
continue
            { user:, token: }
            context[:session][:token] = token
            token = crypt.encrypt_and_sign("user-id:#{user.id}")
user.id
user
continue
User.all
    User.find user_id
    user_id = token.gsub('user-id:', '').to_i
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
continue
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
 request.env["HTTP_AUTHORIZATION"] == "AMDQDEJTNZCqi4Z3i9mgioj1suM3wR1VnMCor4cdeNpIk6l64p+nrW6DRtGID2g9HWge4fES--XyNzVWFEhC3qk4x5--JQCq1Y+bJtJXq9roirYLGg=="
 request.env["HTTP_AUTHORIZATION"] 
crypt.decrypt_and_verify "AMDQDEJTNZCqi4Z3i9mgioj1suM3wR1VnMCor4cdeNpIk6l64p+nrW6DRtGID2g9HWge4fES--XyNzVWFEhC3qk4x5--JQCq1Y+bJtJXq9roirYLGg=="
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
crypt.decrypt_and_verify "AMDQDEJTNZCqi4Z3i9mgioj1suM3wR1VnMCor4cdeNpIk6l64p+nrW6DRtGID2g9HWge4fES--XyNzVWFEhC3qk4x5--JQCq1Y+bJtJXq9roirYLGg=="
crypt
continue
crypt
crypt.decrypt_and_verify "AMDQDEJTNZCqi4Z3i9mgioj1suM3wR1VnMCor4cdeNpIk6l64p+nrW6DRtGID2g9HWge4fES--XyNzVWFEhC3qk4x5--JQCq1Y+bJtJXq9roirYLGg=="
token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
request.env["HTTP_AUTHORIZATION"] = request.env["HTTP_AUTHORIZATION"].to_s
continue
    user_id = JWT.decode request.env["HTTP_AUTHORIZATION"], nil, false
continue
    user_id = JWT.decode request.env["HTTP_AUTHORIZATION"], nil, false
request.env["HTTP_AUTHORIZATION"]
continue
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..32))
request.env
request.env.headers
request.headers
request
header
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
ecrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
continue
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"].to_s
request.env["HTTP_AUTHORIZATION"]
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
request.env["HTTP_AUTHORIZATION"]
    token = crypt.decrypt_and_verify(request.env["HTTP_AUTHORIZATION"])
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
request.env["HTTP_AUTHORIZATION"]
continue
exit
    token = crypt.decrypt_and_verify(request.env["HTTP_AUTHORIZATION"])
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
request.env["HTTP_AUTHORIZATION"]
    token = crypt.decrypt_and_verify(request.env["HTTP_AUTHORIZATION"])
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
request.env["HTTP_AUTHORIZATION"] 
    token = crypt.decrypt_and_verify(request.env["HTTP_AUTHORIZATION"])
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
request.env["HTTP_AUTHORIZATION"]
continue
request.env["HTTP_AUTHORIZATION"]
    token = crypt.decrypt_and_verify request.env["HTTP_AUTHORIZATION"]
    crypt = ActiveSupport::MessageEncryptor.new(Rails.application.credentials.secret_key_base.byteslice(0..31))
continue
request.env.key?("HTTP_AUTHORIZATION")
continue
request.env["HTTP_AUTHORIZATION"]
request.env["Authorization"]
request.env.fetch("Authorization")
request.env
request.env.fetch("HTTP_GATEWAY_HEADERS")
request.env
request.env["HTTP_GATEWAY_HEADERS"]
request.env
request.env.headers
headers
continue
headers
request.env
continue
request.env
continue
request.env
request.env["Authorization"]
request.env["HTTP_X_USER_ID"]
exit
request.env["HTTP_X_USER_ID"]
request.env
env
headers
request
request.headers
request
headers
continue
request
continue
params[:variables]
continue
params[:variables]
continue
params[:variables]
continue
params[:variables]
variables
continue
request.headers.to_h.select { |k,v|
  ['HTTP','CONTENT','AUTHORIZATION'].any? { |s| k.to_s.starts_with? s }
}
request.headers.each { |key, value|  }
self.request.env.select {|k,v| k =~ /^HTTP_/}
self.request.env
self.request.env.select {|k,v| k =~ /^HTTP_/}
self.request.env.select {|k,v| k =~ /^Authorization/}
self.request.env.select {|k,v| k =~ /^HTTP_/}
request.env.to_h
request.env.methods
request.env
request.env["remote_adress"]
request.env
continue
request
request.env
continue
request.headers
request
request.headers['Authorization']
continue
request.headers['Authorization']
request.headers
request
continue
context[:current_user]
context
continue
request.headers
continue
request.headers
continue
