schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

"""Autogenerated input type of ApplyOnJobOffer"""
input ApplyOnJobOfferInput
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  offerId: ID!
}

"""Autogenerated return type of ApplyOnJobOffer."""
type ApplyOnJobOfferPayload
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

input AuthProviderCredentialsInput
  @join__type(graph: USERS)
{
  email: String!
  password: String!
}

"""Autogenerated input type of CreateOffer"""
input CreateOfferInput
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  informations: OfferInput!
}

"""Autogenerated return type of CreateOffer."""
type CreateOfferPayload
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of CreateTag"""
input CreateTagInput
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  informations: TagInput!
}

"""Autogenerated return type of CreateTag."""
type CreateTagPayload
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of CreateUser"""
input CreateUserInput
  @join__type(graph: USERS)
{
  authProvider: AuthProviderCredentialsInput

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  informations: UserInput!
}

"""Autogenerated return type of CreateUser."""
type CreateUserPayload
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of DeleteOffer"""
input DeleteOfferInput
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  offerId: ID!
}

"""Autogenerated return type of DeleteOffer."""
type DeleteOfferPayload
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of DeleteTag"""
input DeleteTagInput
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  tagId: ID!
}

"""Autogenerated return type of DeleteTag."""
type DeleteTagPayload
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of DeleteUser"""
input DeleteUserInput
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteUser."""
type DeleteUserPayload
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

scalar join__FieldSet

enum join__Graph {
  RECRUITMENTS @join__graph(name: "recruitments", url: "http://localhost:3002/graphql")
  USERS @join__graph(name: "users", url: "http://localhost:3001/graphql")
}

"""Represents untyped JSON"""
scalar JSON
  @join__type(graph: RECRUITMENTS)
  @join__type(graph: USERS)

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: RECRUITMENTS)
  @join__type(graph: USERS)
{
  applyOnJobOffer(
    """Parameters for ApplyOnJobOffer"""
    input: ApplyOnJobOfferInput!
  ): ApplyOnJobOfferPayload @join__field(graph: RECRUITMENTS)
  createOffer(
    """Parameters for CreateOffer"""
    input: CreateOfferInput!
  ): CreateOfferPayload @join__field(graph: RECRUITMENTS)
  createTag(
    """Parameters for CreateTag"""
    input: CreateTagInput!
  ): CreateTagPayload @join__field(graph: RECRUITMENTS)
  deleteOffer(
    """Parameters for DeleteOffer"""
    input: DeleteOfferInput!
  ): DeleteOfferPayload @join__field(graph: RECRUITMENTS)
  deleteTag(
    """Parameters for DeleteTag"""
    input: DeleteTagInput!
  ): DeleteTagPayload @join__field(graph: RECRUITMENTS)
  updateOffer(
    """Parameters for UpdateOffer"""
    input: UpdateOfferInput!
  ): UpdateOfferPayload @join__field(graph: RECRUITMENTS)
  updateTag(
    """Parameters for UpdateTag"""
    input: UpdateTagInput!
  ): UpdateTagPayload @join__field(graph: RECRUITMENTS)
  createUser(
    """Parameters for CreateUser"""
    input: CreateUserInput!
  ): CreateUserPayload @join__field(graph: USERS)
  deleteUser(
    """Parameters for DeleteUser"""
    input: DeleteUserInput!
  ): DeleteUserPayload @join__field(graph: USERS)
  signInUser(
    """Parameters for SignInUser"""
    input: SignInUserInput!
  ): SignInUserPayload @join__field(graph: USERS)
  updateUser(
    """Parameters for UpdateUser"""
    input: UpdateUserInput!
  ): UpdateUserPayload @join__field(graph: USERS)
}

type Offer
  @join__type(graph: RECRUITMENTS)
{
  author: [User!]
  candidates: [User!]
  contactDetails: [JSON!]
  description: String
  name: String
  requirements: [JSON!]
  tags: [ID!]
}

"""The connection type for Offer."""
type OfferConnection
  @join__type(graph: RECRUITMENTS)
{
  """A list of edges."""
  edges: [OfferEdge]

  """A list of nodes."""
  nodes: [Offer]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type OfferEdge
  @join__type(graph: RECRUITMENTS)
{
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Offer
}

input OfferInput
  @join__type(graph: RECRUITMENTS)
{
  contactDetails: [JSON!]
  description: String
  name: String
  requirements: [JSON!]
  tags: [ID!]
}

"""Information about pagination in a connection."""
type PageInfo
  @join__type(graph: RECRUITMENTS)
{
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query
  @join__type(graph: RECRUITMENTS)
  @join__type(graph: USERS)
{
  """Lists offers"""
  offers(name: String, tags: String): [Offer!]! @join__field(graph: RECRUITMENTS)

  """Lists users"""
  users(name: String, surname: String, technologies: [String!]): [User!]! @join__field(graph: USERS)
}

"""Autogenerated input type of SignInUser"""
input SignInUserInput
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  credentials: AuthProviderCredentialsInput
}

"""Autogenerated return type of SignInUser."""
type SignInUserPayload
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  token: String
  user: User
}

input TagInput
  @join__type(graph: RECRUITMENTS)
{
  name: String!
}

"""Autogenerated input type of UpdateOffer"""
input UpdateOfferInput
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  informations: OfferInput!
  offerId: ID!
}

"""Autogenerated return type of UpdateOffer."""
type UpdateOfferPayload
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of UpdateTag"""
input UpdateTagInput
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  informations: TagInput!
  tagId: ID!
}

"""Autogenerated return type of UpdateTag."""
type UpdateTagPayload
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of UpdateUser"""
input UpdateUserInput
  @join__type(graph: USERS)
{
  attributes: UserInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateUser."""
type UpdateUserPayload
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

type User
  @join__type(graph: RECRUITMENTS, key: "id", extension: true)
  @join__type(graph: USERS, key: "id")
{
  appliedOffers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): OfferConnection @join__field(graph: RECRUITMENTS)
  createdOffer(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): OfferConnection @join__field(graph: RECRUITMENTS)
  id: ID!
  birthday: String @join__field(graph: USERS)
  description: String @join__field(graph: USERS)
  email: String @join__field(graph: USERS)
  name: String @join__field(graph: USERS)
  phone: Int @join__field(graph: USERS)
  surname: String @join__field(graph: USERS)
  technologies: JSON @join__field(graph: USERS)
}

input UserInput
  @join__type(graph: USERS)
{
  birthday: String
  description: String
  email: String
  name: String
  phone: Int
  surname: String
  technologies: [JSON!]
}
raezil@LAPTOP-LDEA75AG:~/victoria_foundation/gateway$ rover supergraph compose --config ./supergraph-config.yaml
resolving SDL for subgraphs defined in ./supergraph-config.yaml
WARN: An exact federation_version was not specified in './supergraph-config.yaml'. Future versions of `rover supergraph compose` will fail without specifying an exact federation version. See https://www.apollographql.com/docs/rover/commands/supergraphs#setting-a-composition-version for more information.
composing supergraph with Federation v2.4.8
HINT: [INCONSISTENT_ENTITY]: Type "User" is declared as an entity (has a @key applied) in some but not all defining subgraphs: it has no @key in subgraph "users" but has some @key in subgraph "recruitments".

Supergraph Schema: 

schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

"""Autogenerated input type of ApplyOnJobOffer"""
input ApplyOnJobOfferInput
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  offerId: ID!
}

"""Autogenerated return type of ApplyOnJobOffer."""
type ApplyOnJobOfferPayload
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

input AuthProviderCredentialsInput
  @join__type(graph: USERS)
{
  email: String!
  password: String!
}

"""Autogenerated input type of CreateOffer"""
input CreateOfferInput
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  informations: OfferInput!
}

"""Autogenerated return type of CreateOffer."""
type CreateOfferPayload
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of CreateTag"""
input CreateTagInput
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  informations: TagInput!
}

"""Autogenerated return type of CreateTag."""
type CreateTagPayload
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of CreateUser"""
input CreateUserInput
  @join__type(graph: USERS)
{
  authProvider: AuthProviderCredentialsInput

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  informations: UserInput!
}

"""Autogenerated return type of CreateUser."""
type CreateUserPayload
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of DeleteOffer"""
input DeleteOfferInput
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  offerId: ID!
}

"""Autogenerated return type of DeleteOffer."""
type DeleteOfferPayload
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of DeleteTag"""
input DeleteTagInput
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  tagId: ID!
}

"""Autogenerated return type of DeleteTag."""
type DeleteTagPayload
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of DeleteUser"""
input DeleteUserInput
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteUser."""
type DeleteUserPayload
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

scalar join__FieldSet

enum join__Graph {
  RECRUITMENTS @join__graph(name: "recruitments", url: "http://localhost:3002/graphql")
  USERS @join__graph(name: "users", url: "http://localhost:3001/graphql")
}

"""Represents untyped JSON"""
scalar JSON
  @join__type(graph: RECRUITMENTS)
  @join__type(graph: USERS)

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: RECRUITMENTS)
  @join__type(graph: USERS)
{
  applyOnJobOffer(
    """Parameters for ApplyOnJobOffer"""
    input: ApplyOnJobOfferInput!
  ): ApplyOnJobOfferPayload @join__field(graph: RECRUITMENTS)
  createOffer(
    """Parameters for CreateOffer"""
    input: CreateOfferInput!
  ): CreateOfferPayload @join__field(graph: RECRUITMENTS)
  createTag(
    """Parameters for CreateTag"""
    input: CreateTagInput!
  ): CreateTagPayload @join__field(graph: RECRUITMENTS)
  deleteOffer(
    """Parameters for DeleteOffer"""
    input: DeleteOfferInput!
  ): DeleteOfferPayload @join__field(graph: RECRUITMENTS)
  deleteTag(
    """Parameters for DeleteTag"""
    input: DeleteTagInput!
  ): DeleteTagPayload @join__field(graph: RECRUITMENTS)
  updateOffer(
    """Parameters for UpdateOffer"""
    input: UpdateOfferInput!
  ): UpdateOfferPayload @join__field(graph: RECRUITMENTS)
  updateTag(
    """Parameters for UpdateTag"""
    input: UpdateTagInput!
  ): UpdateTagPayload @join__field(graph: RECRUITMENTS)
  createUser(
    """Parameters for CreateUser"""
    input: CreateUserInput!
  ): CreateUserPayload @join__field(graph: USERS)
  deleteUser(
    """Parameters for DeleteUser"""
    input: DeleteUserInput!
  ): DeleteUserPayload @join__field(graph: USERS)
  signInUser(
    """Parameters for SignInUser"""
    input: SignInUserInput!
  ): SignInUserPayload @join__field(graph: USERS)
  updateUser(
    """Parameters for UpdateUser"""
    input: UpdateUserInput!
  ): UpdateUserPayload @join__field(graph: USERS)
}

type Offer
  @join__type(graph: RECRUITMENTS)
{
  author: User
  candidates: [User!]
  contactDetails: [JSON!]
  description: String
  name: String
  requirements: [JSON!]
  tags: [ID!]
}

"""The connection type for Offer."""
type OfferConnection
  @join__type(graph: RECRUITMENTS)
{
  """A list of edges."""
  edges: [OfferEdge]

  """A list of nodes."""
  nodes: [Offer]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type OfferEdge
  @join__type(graph: RECRUITMENTS)
{
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Offer
}

input OfferInput
  @join__type(graph: RECRUITMENTS)
{
  contactDetails: [JSON!]
  description: String
  name: String
  requirements: [JSON!]
  tags: [ID!]
}

"""Information about pagination in a connection."""
type PageInfo
  @join__type(graph: RECRUITMENTS)
{
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query
  @join__type(graph: RECRUITMENTS)
  @join__type(graph: USERS)
{
  """Lists offers"""
  offers(name: String, tags: String): [Offer!]! @join__field(graph: RECRUITMENTS)

  """Lists users"""
  users(name: String, surname: String, technologies: [String!]): [User!]! @join__field(graph: USERS)
}

"""Autogenerated input type of SignInUser"""
input SignInUserInput
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  credentials: AuthProviderCredentialsInput
}

"""Autogenerated return type of SignInUser."""
type SignInUserPayload
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  token: String
  user: User
}

input TagInput
  @join__type(graph: RECRUITMENTS)
{
  name: String!
}

"""Autogenerated input type of UpdateOffer"""
input UpdateOfferInput
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  informations: OfferInput!
  offerId: ID!
}

"""Autogenerated return type of UpdateOffer."""
type UpdateOfferPayload
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of UpdateTag"""
input UpdateTagInput
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  informations: TagInput!
  tagId: ID!
}

"""Autogenerated return type of UpdateTag."""
type UpdateTagPayload
  @join__type(graph: RECRUITMENTS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of UpdateUser"""
input UpdateUserInput
  @join__type(graph: USERS)
{
  attributes: UserInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateUser."""
type UpdateUserPayload
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

type User
  @join__type(graph: RECRUITMENTS, key: "id", extension: true)
  @join__type(graph: USERS, key: "id")
{
  appliedOffers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): OfferConnection @join__field(graph: RECRUITMENTS)
  createdOffer(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): OfferConnection @join__field(graph: RECRUITMENTS)
  id: ID!
  birthday: String @join__field(graph: USERS)
  description: String @join__field(graph: USERS)
  email: String @join__field(graph: USERS)
  name: String @join__field(graph: USERS)
  phone: Int @join__field(graph: USERS)
  surname: String @join__field(graph: USERS)
  technologies: JSON @join__field(graph: USERS)
}

input UserInput
  @join__type(graph: USERS)
{
  birthday: String
  description: String
  email: String
  name: String
  phone: Int
  surname: String
  technologies: [JSON!]
}