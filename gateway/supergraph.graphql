
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

input AuthProviderCredentialsInput
  @join__type(graph: USERS)
{
  email: String!
  password: String!
}

"""Autogenerated input type of CreateUser"""
input CreateUserInput
  @join__type(graph: USERS)
{
  authProvider: AuthProviderCredentialsInput

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  informations: UserInput!
}

"""Autogenerated return type of CreateUser."""
type CreateUserPayload
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of CreateVideo"""
input CreateVideoInput
  @join__type(graph: STORAGES)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  file: Upload!
  input: VideoInput!
}

"""Autogenerated return type of CreateVideo."""
type CreateVideoPayload
  @join__type(graph: STORAGES)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of DeleteUser"""
input DeleteUserInput
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteUser."""
type DeleteUserPayload
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""Autogenerated input type of DeleteVideo"""
input DeleteVideoInput
  @join__type(graph: STORAGES)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  videoId: ID!
}

"""Autogenerated return type of DeleteVideo."""
type DeleteVideoPayload
  @join__type(graph: STORAGES)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
}

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime
  @join__type(graph: STORAGES)

scalar join__FieldSet

enum join__Graph {
  STORAGES @join__graph(name: "storages", url: "http://localhost:3000/graphql")
  USERS @join__graph(name: "users", url: "http://localhost:3001/graphql")
}

"""Represents untyped JSON"""
scalar JSON
  @join__type(graph: STORAGES)
  @join__type(graph: USERS)

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: STORAGES)
  @join__type(graph: USERS)
{
  createVideo(
    """Parameters for CreateVideo"""
    input: CreateVideoInput!
  ): CreateVideoPayload @join__field(graph: STORAGES)
  deleteVideo(
    """Parameters for DeleteVideo"""
    input: DeleteVideoInput!
  ): DeleteVideoPayload @join__field(graph: STORAGES)
  updateVideo(
    """Parameters for UpdateVideo"""
    input: UpdateVideoInput!
  ): UpdateVideoPayload @join__field(graph: STORAGES)
  createUser(
    """Parameters for CreateUser"""
    input: CreateUserInput!
  ): CreateUserPayload @join__field(graph: USERS)
  deleteUser(
    """Parameters for DeleteUser"""
    input: DeleteUserInput!
  ): DeleteUserPayload @join__field(graph: USERS)
  signInUser(
    """Parameters for SignInUser"""
    input: SignInUserInput!
  ): SignInUserPayload @join__field(graph: USERS)
  updateUser(
    """Parameters for UpdateUser"""
    input: UpdateUserInput!
  ): UpdateUserPayload @join__field(graph: USERS)
}

type Query
  @join__type(graph: STORAGES)
  @join__type(graph: USERS)
{
  """Lists videos"""
  videos(createdAt: ISO8601DateTime, description: String, name: String, rules: JSON, type: String): [Video!]! @join__field(graph: STORAGES)

  """Lists users"""
  users(name: String, surname: String, technologies: [String!]): [User!]! @join__field(graph: USERS)
}

"""Autogenerated input type of SignInUser"""
input SignInUserInput
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  credentials: AuthProviderCredentialsInput
}

"""Autogenerated return type of SignInUser."""
type SignInUserPayload
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  token: String
  user: User
}

"""Autogenerated input type of UpdateUser"""
input UpdateUserInput
  @join__type(graph: USERS)
{
  attributes: UserInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateUser."""
type UpdateUserPayload
  @join__type(graph: USERS)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  user: User
}

"""Autogenerated input type of UpdateVideo"""
input UpdateVideoInput
  @join__type(graph: STORAGES)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  input: VideoInput!
  videoId: ID!
}

"""Autogenerated return type of UpdateVideo."""
type UpdateVideoPayload
  @join__type(graph: STORAGES)
{
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  status: Int!
  video: Video
}

scalar Upload
  @join__type(graph: STORAGES)

type User
  @join__type(graph: USERS)
{
  birthday: String
  description: String
  email: String
  name: String
  phone: Int
  surname: String
  technologies: JSON
}

input UserInput
  @join__type(graph: USERS)
{
  birthday: String
  description: String
  email: String
  name: String
  phone: Int
  surname: String
  technologies: [JSON!]
}

type Video
  @join__type(graph: STORAGES)
{
  description: String
  id: ID!
  name: String
  rules: JSON
  videoType: String
}

input VideoInput
  @join__type(graph: STORAGES)
{
  author: [ID!]!
  description: String!
  rules: [JSON!]
  title: String!
  videoType: String!
}